<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Jellabo.Team_miniPj_Backend.project.ProjectMapper">

	<!-- 현재 프로젝트 정보 불러오기 시작 -->
	<select id="projectCodeCheck" resultType="Integer">
		SELECT COUNT(*) FROM projects WHERE code = #{code};
	</select>
	
	<select id="projectJoinCheck" resultType="Integer">
		SELECT COUNT(*) FROM joinedprojects WHERE email = #{email} AND code = #{code};
	</select>

	<select id="loadProjectInfo" resultType="ProjectDataDTO">
		SELECT code, title, description, nickname, creatoremail, 
		DATE_FORMAT(deadline, '%Y-%m-%d') AS deadline
		FROM projects p
		INNER JOIN users u ON p.creatoremail = u.email WHERE p.code = #{code};
	</select>
	<!-- 현재 프로젝트 정보 불러오기 끝 -->

	<!-- 현재 프로젝트 카테고리 불러오기 시작 -->
	<select id="loadCategories" resultType="String">
		SELECT category FROM category WHERE code = #{code};
	</select>
	<!-- 현재 프로젝트 카테고리 불러오기 끝 -->

	<!-- 카테고리 생성 시작 -->
	<insert id="createCategoryProcess" parameterType="CategoryDTO">
		INSERT INTO category SELECT #{code}, #{category} 
		WHERE NOT EXISTS(
			SELECT 1 FROM category 
			WHERE code = #{code} AND category = #{category}
		);
	</insert>
	<!-- 카테고리 생성 끝 -->

	<!-- 카테고리 삭제 시작 -->
	<delete id="deleteCategoryPost" parameterType="CategoryDTO">
		DELETE FROM posts${code} 
		WHERE category = #{category};
	</delete>
	
	<delete id="deleteCategoryProcess" parameterType="CategoryDTO">
		DELETE FROM category 
		WHERE code = #{code} AND category = #{category};
	</delete>
	<!-- 카테고리 삭제 끝 -->

	<!-- 현재 프로젝트 참여자 목록 불러오기 시작 -->
	<select id="loadUserList" resultType="com.Jellabo.Team_miniPj_Backend.users.UserDTO">
		SELECT j.email, u.name, u.nickname FROM projects p
		INNER JOIN joinedprojects j ON p.code = j.code
		INNER JOIN users u ON j.email = u.email 
		WHERE p.code = #{code};
	</select>
	<!-- 현재 프로젝트 참여자 목록 불러오기 끝 -->

	<!-- 멤버 추가 시작 -->
	<select id="emailCheck" resultType="Integer">
		SELECT COUNT(*) FROM users WHERE email = #{email};
	</select>

	<insert id="addUserProcess" parameterType="map">
		INSERT INTO joinedprojects (code, email) SELECT #{code}, #{email}
		WHERE NOT EXISTS (
			SELECT 1 FROM joinedprojects WHERE email = #{email} AND code = #{code}
		);
	</insert>
	<!-- 멤버 추가 끝 -->

	<!-- 맴버 추방 시작 -->
	<delete id="kickUserProcess" parameterType="map">
		DELETE FROM joinedprojects
		WHERE email = #{email} AND code = #{code};
	</delete>
	<!-- 멤버 추방 끝 -->

	<!-- 현재 프로젝트 정보 수정 시작 -->
	<update id="resettingProjectProcess" parameterType="map">
		UPDATE projects 
		SET title = #{title}, description = #{description}, deadline = #{deadline}
		WHERE code = #{code};
	</update>
	<!-- 현재 프로젝트 정보 수정 끝 -->

	<!-- 프로젝트 삭제 시작 -->
	<select id="isCreator" parameterType="ProjectDataDTO" resultType="Integer">
		SELECT COUNT(*) FROM projects 
		WHERE code = #{code, jdbcType=INTEGER}
		AND creatoremail = #{creatoremail, jdbcType=VARCHAR};
	</select>

	<update id="dropReplesTable" parameterType="String">
		${dropReplesTable}
	</update>

	<update id="dropCommentsTable" parameterType="String">
		${dropCommentsTable}
	</update>

	<update id="dropPostsTable" parameterType="String">
		${dropPostsTable}
	</update>

	<delete id="deleteCategory" parameterType="Integer">
		DELETE FROM category
		WHERE code = #{code, jdbcType=INTEGER};
	</delete>

	<delete id="deleteJoinedProject" parameterType="Integer">
		DELETE FROM joinedprojects
		WHERE code = #{code, jdbcType=INTEGER};
	</delete>

	<delete id="deleteProject" parameterType="Integer">
		DELETE FROM projects
		WHERE code = #{code, jdbcType=INTEGER};
	</delete>
	<!-- 프로젝트 삭제 끝 -->

</mapper>